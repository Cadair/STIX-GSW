;+
; :description:
;    Run the given scenario calculation including the data simulation, the flight software simulator.
;    Generate the telemetry for the imaging intervals and pass this in to an analysis software object.
;    Apply a rate dependent energy shift to the eventlist files generated by the DSS and repeat the
;    processing with the FSW and telemetry.
;
;
; :keywords:
;   scenario_name  : in, type='float', default=''stx_scenario_rate_dept_' + scenario_flux + '_rate''
;                     the name of the scenario file to be processed
;
;   scenario_flux  : in, type='string', default='high'
;                    a short (e.g. 1 word) description of the scenario used for naming plots and telemetry files
;
;
; :examples:
;   stx_scenario_rate_change_comparison,  scenario_name = 'stx_scenario_rate_dept_high_rate'
;
; :history:
;    10-Oct-2017 - ECMD (Graz), initial release
;
;-
pro stx_scenario_rate_change_comparison, scenario_name = scenario_name, scenario_flux = scenario_flux
  ;set the default scenario
  default, scenario_flux, 'high'
  default, scenario_name, 'stx_scenario_rate_dept_' + scenario_flux + '_rate'
  
  ;create the analysis object for the original unshifted data
  asw = obj_new('stx_analysis_software')
  
  ;run the data simulation and the flight software simulator for the given scenario
  run_ds_fswsim_demo, dss=dss, fsw=fsw, scenario=scenario_name
  
  ;get the end time of the scenario
  scenario_end = dss->getdata(scenario_name=scenario_name, output_target='scenario_length')
  
  fsw->set, module="stx_fsw_module_intervalselection_img", trimming_max_loss = 0.0d
  
  ;set the flare flag so the full time period of the simulation is included
  flare_start = 0.
  flare_end = scenario_end
  
  ;set the input for the telemetry writer to the imaging intervals
  input_data = {sd_xray_1 : 1}
  input_data = add_tag(input_data,[flare_start,flare_end], "rel_flare_time")
  
  ;write the telemetry for this scenario in the appropriate folder
  tmtc_filename = filepath('tmtc_' + scenario_flux + '.bin', root_dir = scenario_name)
  ret = fsw->getdata(output_target="stx_fsw_tmtc", filename = tmtc_filename, _extra=input_data)
  
  ;read in the telemetry file written in the previous step
  tel_reader = stx_telemetry_reader(filename = tmtc_filename, /scan_mode)
  tel_reader->getdata, fsw_pixel_data_time_group = fsw_pixel_data
  
  ;convert the pixel data from the telemetry file to the appropriate format
  all_pixel_data = stx_convert_fsw_pixel_data_time_group_to_asw(fsw_pixel_data[0], energy_axis=energy_axis, datasource="TMTC original: ")
  
  ;pass the pixel data into the analysis software object
  asw->setdata, all_pixel_data
  asw->set, module="global", max_reprocess_level = max([3,asw->get(/max_reprocess_level)])
  
  ;apply the rate dependent energy offset to the simulated data fits files for the current scenario
  stx_rate_dependent_offset_fits, scenario_name = scenario_name, scenario_flux = scenario_flux
  
  ;destroy the data simulation, flight software and telemetry reader objects associated with the original unshifted data
  obj_destroy, dss
  obj_destroy, fsw
  obj_destroy, tel_reader
  
  ;create new objects for processing the data which had been energy shifted
  asw_shifted = obj_new('stx_analysis_software')
  dss = obj_new('stx_data_simulation')
  fsw = obj_new('stx_flight_software_simulator', start_time=stx_construct_time())
  fsw->set, eab_m_acc = bytarr(32)+1 ; all detectors are included in run_ds_fswsim_demo so set the same values here
  fsw->set, module = "stx_fsw_module_intervalselection_img", trimming_max_loss = 0.0d
  
  
  ;run the flight software simulator again for this scenario now using the energy shifted data
  no_time_bins = long(dss->getdata(scenario_name=scenario_name, output_target='scenario_length') / 4d)
  
  for time_bin = 0L, no_time_bins do begin
  
    fsw->getproperty, stx_fsw_m_rate_control_regime = rcr
    
    rcrt = 0
    ds_result_data = dss->getdata(output_target='stx_ds_result_data', time_bin=time_bin, scenario=scenario_name, rate_control_regime = rcr.rcr + rcrt)
    
    if(ds_result_data eq !NULL) then continue
    
    ; Quickfixes (to be removed later)
    ds_result_data.filtered_eventlist.time_axis = stx_construct_time_axis([0d, 4d])
    ds_result_data.triggers.time_axis = stx_construct_time_axis([0d, 4d])
    
    ; Process the interval and plot
    fsw->process, ds_result_data.filtered_eventlist, ds_result_data.triggers, total_source_counts=ds_result_data.total_source_counts
  endfor
  
  ;write the telemetry for this scenario in the same folder as before
  tmtc_filename = filepath('tmtc_' + scenario_flux + '_shifted.bin', root_dir = scenario_name)
  ret = fsw->getdata(output_target = "stx_fsw_tmtc", filename=tmtc_filename, _extra=input_data)
  
  ;read in the telemetry file written in the previous step
  tel_reader = stx_telemetry_reader(filename = tmtc_filename, /scan_mode)
  tel_reader->getdata, fsw_pixel_data_time_group = fsw_pixel_data
  
  ;convert the pixel data from the telemetry file to the appropriate format
  all_pixel_data_shifted = stx_convert_fsw_pixel_data_time_group_to_asw(fsw_pixel_data[0], energy_axis=energy_axis, datasource="TMTC shifted: ")
  
  ;pass the pixel data into the analysis software object
  asw_shifted->setdata, all_pixel_data_shifted
  asw_shifted->set, module="global", max_reprocess_level = max([3,asw->get(/max_reprocess_level)])
  
  ; plot some comparisons between the results for both analysis objects
  stx_plot_shifted_image_comparison, asw, asw_shifted, scenario_name = scenario_name, scenario_flux = scenario_flux
  
  ;clean up all the remaining objects
  obj_destroy, dss
  obj_destroy, fsw
  obj_destroy, tel_reader
  obj_destroy, asw
  obj_destroy, asw_shifted
  
end
