;+
; :description:
;    This procedure uses the RHESSI quicklook lighcurve as a basis for the STIX flare detection module
;    for testing with more realistic data.
;
; :categories:
;    testing, flare detection
;
; :params:
;    fc : in, required, type="hsi_obssum_spec_state_par3 structure"
;            RHESSI observing summary structure generated by hsi_extrct_flx
;
; :keywords:
;
;   savename : file name for the saved plot
;
;   rhessi_bg : constant RHESSI background estimate in thermal and non-thermal bands
;
;   thermal_scaling = peak counts in thermal energy range
;
;   ntscaling : ratio of thermal to nonthermal counts
;
;   bgfactor : multiplying factor for STIX background
;
;   close : close window after plot is gernerated
;
;   thermal_bkg : Expectation of STIX thermal background counts
;
;   nonthermal_bkg : Expectation of STIX non-thermal background counts
;
;    phi : phase for sinusoidal background component
;
;    tamp : thermal amplitude for sinusoidal background component
;
;    ntamp : non-thermal amplitude for sinusoidal background component
;
;    freq : frequwncy of sinusodal background component
;
;
; :examples:
;     stx_flare_detection_rhessi_test, fc, $
;            savename ='fd_test_06Jul03.png',rhessi_bg = [36,4], $
;            thermal_scaling = 5e3, ntscaling = 0.05, /close
;
; :history:
;    20-Jul-2018 - ECMD (Graz), initial release
;
;-
pro stx_flare_detection_rhessi_test, fc, savename = savename, rhessi_bg = rhessi_bg, thermal_scaling =thermal_scaling, $
  ntscaling = ntscaling, bgfactor = bgfactor, close = close, thermal_bkg= thermal_bkg,nonthermal_bkg = nonthermal_bkg, $
  phi = phi, tamp = tamp, ntamp = ntamp, freq = freq

  default, scaling, 1
  default, savename, 'fd_trial.png'
  default, thermal_scaling, 2d3*0.3
  default, ntscaling, 0.03
  default, bgfactor, 1
  default, thermal_bkg, 0.36
  default, nonthermal_bkg, 2.4
  default, phi , 1.
  default, tamp , 0
  default, ntamp , 0
  default, freq , trange/20.
  default, rhessi_bg, [36,4 ]

  ;get the quicklook lightcurve in the 5 standard channels from the observing summary structure created by hsi_extrct_flx
  d5 =fc.d5
  ut = fc.ut

  n = n_elements(fc)


  e = findgen(101) + 1.01
  edge_products, e, mean = em

  ;non thermal scaling is taken as a fraction of
  nonthermal_scaling = thermal_scaling*ntscaling

  ;subtract the constant RHESSI background counts from the lightcurve in the channels 6-12 and 25 - 50 keV
  thermal_counts =  (d5[1,*] - rhessi_bg[0]) >0

  nonthermal_counts = (d5[3,*] - rhessi_bg[1] )>0

  ;scale the RHESSI counts such that the maximum value in the input lightcurve in the thermal band is
  ;equal to the thermal scaling factor
  if keyword_set(scaling) then begin
    thermal_counts = f_div(thermal_counts,max(thermal_counts))
    nonthermal_counts = f_div(nonthermal_counts,max(nonthermal_counts))

    thermal_counts *= thermal_scaling
    nonthermal_counts *= nonthermal_scaling
  endif


  trange = (ut[-1] - ut[0])/60.

  ; for a sinusoidally varying background
  xx = findgen(n)/n
  phi = 1.
  tamp = 5.*bgfactor
  ntamp = 20.*bgfactor
  freq = trange/20.

  ;randomly generate background counts for 31 (imaging  + background) detectors for all time
  ;bins. A Poisson distribution with expectation dependent on the energy channel currently
  ; being tested is used.
  thermal_bkg_counts =  reform(randomu(seed, 31.*n, poi=thermal_bkg*bgfactor),31, n)
  nonthermal_bkg_counts =  reform(randomu(seed, 31.*n, poi=nonthermal_bkg*bgfactor),31,n)

  ;the background estimate for the current event is taken as the remaining
  ;(1 detector * n time bins) values in the thermal_bkg_counts and nonthermal_bkg_counts arrays
  backgound_counts =transpose([thermal_bkg_counts[-1,*],nonthermal_bkg_counts[-1,*]])


  ;counts = scaled RHESSI counts + STIX background
  thermal_counts= median(rebin(thermal_counts +poidev(tamp*sin(freq*(2.*!pi*xx + phi))),30,n) + thermal_bkg_counts[0:29,*], dim = 1)
  nonthermal_counts= median(rebin(nonthermal_counts + poidev(ntamp*sin(freq*(2.*!pi*xx + phi))),30,n) + nonthermal_bkg_counts[0:29,*], dim = 1)


  rcounts = long(transpose([[thermal_counts,nonthermal_counts]]))


  flare_intensity_lut_str = read_csv( concat_dir(getenv('STX_CONF'), 'stx_fsw_flare_intensity.csv'), n_table_header=1)
  flare_intensity_lut = [[flare_intensity_lut_str.field1],[flare_intensity_lut_str.field2],[flare_intensity_lut_str.field3],[flare_intensity_lut_str.field4]]

  ;run the flare detection routine on this lightcurve, using the specified config parameters
  fdr = stx_fsw_flare_detection_ed(rcounts,backgound_counts,reform(d5[3,*]*0),nbl = [1200,60]  $
    , kb = 1 $
    , thermal_kdk = [0.2,0.2] $
    , nonthermal_kdk = [0.2,0.2] $
    , thermal_krel_rise = [1.5,1.5] $
    , nonthermal_krel_rise = [1.,1] $
    , thermal_krel_decay = [0.5,0.5] $
    , nonthermal_krel_decay = [0.5,0.5] $
    , thermal_cfmin = [36,36] $
    , nonthermal_cfmin = [50,50]$
    , flare_intensity_lut =flare_intensity_lut)

  ; for plotting the RHESSI and STIX flare flags above the lightcurves
  loadct, 39,/si
  ffr =  fltarr(n_elements(fc))
  u = where(fc.flare gt 0)
  ffr[u]= max(d5)*4

  ffs = fltarr(n_elements(fdr))
  u = where(fdr gt 0)
  ffs[u] = max(rcounts)*2.


  tt_jd=tim2jd((atime((fc.ut))))

  nbands  = 5
  ;colorblind, N_colors =7
  linecolors
  tvlct,r,g,b, /get

  a=[[r],[g],[b]]

  namearry = strarr(nbands)
  ebands_rhessi = [3,6,12,25,50,100,300]
  for i = 0, nbands-1 do namearry[i] = string(ebands_rhessi[i],format='(I0)')+' - '+ string(ebands_rhessi[i+1],format='(I0)')+' keV'
  ebands_stix = [6,14,22,45]
  namearry_stix = strarr(3)

  for i = 0, 2 do namearry_stix[i] = string(ebands_stix[i],format='(I0)')+' - '+ string(ebands_stix[i+1],format='(I0)')+' keV'

  w1 = window(window_title=" comparison ", location =[-60,-1080*3/4], dim = [1446,889], /buffer)
  ;ww = window(  DIMENSIONS=[1446,889], /buffer)
  p = plot(tt_jd, d5[1,*],color = reform(a[5,*]), /ylog , yrange = [min(d5)*0.5 > 0.1 ,max(d5)*6],/ystyle ,/xstyle, name = namearry[1], $
    POSITION =[0.089216275,0.51806711,0.77999991,0.93999995], xtickunits='time' ,  XTICKFORMAT='(C(CHI2.2,":",CMI2.2))',/over)
  p.ytitle = 'Corrected RHESSI Counts'
  p = plot(tt_jd,d5[3,*],color = reform(a[1,*]) ,name = namearry[3], /over)
  p = plot([tt_jd[0],tt_jd[-1]],[rhessi_bg[0],rhessi_bg[0]],color = reform(a[6,*]) ,name = 'Background '+namearry[1], /over)
  p = plot([tt_jd[0],tt_jd[-1]],[rhessi_bg[1],rhessi_bg[1]],color = reform(a[2,*]) ,name = 'Background '+namearry[3], /over)

  p = plot(tt_jd,ffr, color = reform(a[4,*]) ,name = 'RHESSI Flare Flag', thick = 2, /over)

  ax = p.axes
  leg = legend(font_size=11,shadow = 0,/auto_text_color, transparency=50, position = [0.98,0.88999998])

  p1= plot(tt_jd, rcounts[*,0],color = reform(a[5,*]), /ylog , yrange = [min(rcounts)*0.5 >0.1 ,max(rcounts)*5],/ystyle ,/xstyle, name = namearry[1], $
    POSITION =[0.085727131,0.053999743,0.77999997,0.43106468], xtickunits='time' , current=1 , XTICKFORMAT='(C(CHI2.2,":",CMI2.2))')
  p1.title = 'Peak Thermal counts = ' +strtrim(long(thermal_scaling),2) +'  Background factor = ' +strtrim(bgfactor,2) + '  Nonthermal scaling = ' + strtrim(ntscaling,2)

  p2 = plot(tt_jd,rcounts[*,1],color = reform(a[1,*]) ,name = namearry[3], /over)
  p3 = plot(tt_jd,ffs, color = reform(a[3,*]) ,name = 'STIX Flare Flag',thick =2.5, /over)
  leg = legend(font_size=11,shadow = 0,/auto_text_color, transparency=50, position = [0.96,0.35], target = [p1,p2,p3])
  ax = p1.axes
  p1.ytitle = 'STIX Counts'
  ax[0].title = "Start Date: " + stx_time2any((fc.ut)[0],/vms)



  p.save, savename
  if keyword_set(close) then w1.close

end
