;+
; :name:
;   STX_COMPRESS
; :description:
;    This function uses a lookup table to both compress and decompress numbers with 2% end-to-end accuracy over the
;    range from 0 to > 1.19e5 using only 8 bits
;
; :categories:
;    data compression and recovery, telemetry
;
; :params:
;    input : array of numbers to compress or decompress
;
; :returns:
;             returns a byte array of compressed values 0-255
;
; :keywords:
;    DECOMPRESS - reverse the compression
;    TABLE_FILE - 256 element file to use for compression table, default is
;     $STX_SIM/stix_compress_table_8bit_2percent.txt
;    RESET - If set, reload the table from the TABLE_FILE which must be present or the default is used
;    COMPRESS_CLASS - reserved for future use when there will be different compression schemes for different data
;    
; :examples:
;    IDL> print, stx_compress( /dec, stx_compress( 5.2e4 ) )
;    52599.3
;    IDL> print, stx_compress( /dec, stx_compress( 5.1e4 ) )
;    50576.5
;    IDL> print, stx_compress( /dec, stx_compress( 5.0e4 ) )
;    50576.5
;    IDL> print, stx_compress( /dec, stx_compress( 4.9e4 ) )
;    48631.8
;    IDL> print, stx_compress( /dec, stx_compress( findgen(200) ) )
;    0.000000      1.00000      2.00000      3.00000      4.00000      5.00000      6.00000      7.00000      8.00000      9.00000      10.0000      11.0000      12.0000
;    13.0000      14.0000      15.0000      16.0000      17.0000      18.0000      19.0000      20.0000      21.0000      22.0000      23.0000      24.0000      25.0000
;    26.0000      27.0000      28.0000      29.0000      30.0000      31.0000      32.0000      33.0000      34.0000      35.0000      36.0000      37.0000      38.0000
;    39.0000      40.0000      41.0000      42.0000      43.0000      44.0000      45.0000      46.0000      47.0000      48.0000      49.0000      49.0000      52.0000
;    52.0000      54.0000      54.0000      56.0000      56.0000      58.0000      58.0000      60.0000      60.0000      62.0000      62.0000      64.0000      64.0000
;    66.0000      66.0000      68.0000      68.0000      70.0000      70.0000      72.0000      72.0000      74.0000      74.0000      76.2500      76.2500      76.2500
;    79.0000      79.0000      79.0000      82.0000      82.0000      82.0000      85.0000      85.0000      85.0000      88.0000      88.0000      88.0000      91.0000
;    91.0000      91.0000      94.0000      94.0000      94.0000      97.0000      97.0000      97.0000      100.250      100.250      100.250      104.000      104.000
;    104.000      104.000      108.000      108.000      108.000      108.000      112.000      112.000      112.000      112.000      116.000      116.000      116.000
;    116.000      120.000      120.000      120.000      120.000      124.000      124.000      124.000      124.000      128.250      128.250      128.250      128.250
;    128.250      133.000      133.000      133.000      133.000      133.000      138.000      138.000      138.000      138.000      138.000      143.000      143.000
;    143.000      143.000      143.000      148.000      148.000      148.000      148.000      148.000      153.250      153.250      153.250      153.250      153.250
;    159.000      159.000      159.000      159.000      159.000      159.000      165.000      165.000      165.000      165.000      165.000      165.000      171.000
;    171.000      171.000      171.000      171.000      171.000      177.250      177.250      177.250      177.250      177.250      177.250      177.250      184.000
;    184.000      184.000      184.000      184.000      184.000      184.000      191.000      191.000      191.000      191.000      191.000      191.000      191.000
;    198.000      198.000      198.000      198.000      198.000
;    IDL> print, f_div( stx_compress( /dec, stx_compress( findgen(200) ) ) - findgen(200), findgen(200))
;    % Compiled module: F_DIV.
;    0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000
;    0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000
;    0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000
;    0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000   -0.0200000    0.0196078
;    0.000000    0.0188679     0.000000    0.0181818     0.000000    0.0175439     0.000000    0.0169492     0.000000    0.0163934     0.000000    0.0158730     0.000000
;    0.0153846     0.000000    0.0149254     0.000000    0.0144928     0.000000    0.0140845     0.000000    0.0136986     0.000000    0.0166667   0.00328947  -0.00974026
;    0.0128205     0.000000   -0.0125000    0.0123457     0.000000   -0.0120482    0.0119048     0.000000   -0.0116279    0.0114943     0.000000   -0.0112360    0.0111111
;    0.000000   -0.0108696    0.0107527     0.000000   -0.0105263    0.0104167     0.000000   -0.0102041    0.0126263   0.00250000  -0.00742574    0.0196078   0.00970874
;    0.000000  -0.00952381    0.0188679   0.00934579     0.000000  -0.00917431    0.0181818   0.00900901     0.000000  -0.00884956    0.0175439   0.00869565     0.000000
;    -0.00854701    0.0169492   0.00840336     0.000000  -0.00826446    0.0163934   0.00813008     0.000000  -0.00800000    0.0178571   0.00984252   0.00195313  -0.00581395
;    -0.0134615    0.0152672   0.00757576     0.000000  -0.00746269   -0.0148148    0.0147059   0.00729927     0.000000  -0.00719424   -0.0142857    0.0141844   0.00704225
;    0.000000  -0.00694444   -0.0137931    0.0136986   0.00680272     0.000000  -0.00671141   -0.0133333    0.0149007   0.00822368   0.00163399  -0.00487013   -0.0112903
;    0.0192308    0.0127389   0.00632911     0.000000  -0.00625000   -0.0124224    0.0185185    0.0122699   0.00609756     0.000000  -0.00602410   -0.0119760    0.0178571
;    0.0118343   0.00588235     0.000000  -0.00581395   -0.0115607    0.0186782    0.0128571   0.00710227   0.00141243  -0.00421348  -0.00977654   -0.0152778    0.0165746
;    0.0109890   0.00546448     0.000000  -0.00540541   -0.0107527   -0.0160428    0.0159574    0.0105820   0.00526316     0.000000  -0.00520833   -0.0103627   -0.0154639
;    0.0153846    0.0102041   0.00507614     0.000000  -0.00502513
;    IDL> print, max( abs( f_div( stx_compress( /dec, stx_compress( findgen(200) ) ) - findgen(200), findgen(200))))
;    0.0200000
;
; :history:
;    24-Nov-2014, richard.schwartz@nasa.gov
;    05-dec-2014, richard.schwartz@nasa.gov, added compress_class keyword
;-
function stx_compress, input, decompress = decompress, table_file = table_file, reset = reset,$
  compress_class = compress_class

default, compress_class, 0 ;we'll make choices with this at some point but it's a dummy now, 5-dec-2014
default, decompress, 0
common stx_compress_table, table
default, table_file, loc_file( concat_dir('STX_SIM', 'stix_compress_table_8bit_2percent.txt') )
if keyword_set( reset ) || ~exist( table ) then $
  table = ( float( rd_tfile(  table_file, /auto )) )[0:255]

if ~decompress then $
  result = byte( interpol( indgen(256), table, input )) else begin
  z = where( input gt 49, nz )
  result = float( input )
  if nz ge 1 then result[z] = interpol( table, findgen( 256 ), input[z] + 0.5 )
  endelse
return, result
end